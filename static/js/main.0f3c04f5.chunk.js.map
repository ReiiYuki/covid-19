{"version":3,"sources":["contexts/dateSelectorContext/index.ts","hooks/useDateSelector/index.tsx","components/Header/index.tsx","pages/QuarantinePage/index.tsx","pages/ActivePage/index.tsx","pages/InitTrackPage/index.tsx","App.tsx","components/DateSelectorProvider/index.tsx","GlobalStyle.tsx","serviceWorker.ts","index.tsx"],"names":["createContext","selectDate","date","clearDate","useDateSelector","useContext","dateSelectorContext","Header","title","icon","color","subtitle","size","className","QuarantinePage","selectedDate","leftDays","useMemo","today","dayjs","add","diff","faHome","ActivePage","isFinish","endDay","isAfter","useEffect","localStorage","clear","ReactGA","event","category","action","currentPage","faCheckCircle","onClick","InitTrackPage","faViruses","onDayClick","PageContainer","styled","div","App","href","data-color-scheme","data-size","data-show-count","aria-label","DateSelectorProvider","children","useState","setSelectedDate","contextValue","useCallback","undefined","setItem","getTime","toString","timestampStr","getItem","timestamp","parseInt","Date","Provider","value","createGlobalStyle","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","GlobalStyle","document","getElementById","initialize","pageview","pathname","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0f3c04f5.chunk.js","sourcesContent":["import { createContext } from 'react';\n\ninterface ContextValue {\n    selectedDate?: Date\n    selectDate: (date: Date) => void\n    clearDate: () => void\n}\n\nconst defaultContextValue = {\n    selectDate: (date: Date) => {},\n    clearDate: () => {},\n}\n\nexport default createContext<ContextValue>(defaultContextValue)\n","import { useContext } from 'react';\n\nimport dateSelectorContext from '../../contexts/dateSelectorContext';\n\nfunction useDateSelector() {\n    return useContext(dateSelectorContext)\n}\n\nexport default useDateSelector\n","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { IconProp } from '@fortawesome/fontawesome-svg-core'\n\ninterface Props {\n    title: string\n    subtitle?: string\n    icon: IconProp\n    color: string\n}\n\nconst Header = ({ title, icon, color, subtitle }: Props) => (\n    <>\n        <FontAwesomeIcon icon={icon} size=\"10x\" className={`has-text-${color}`} />\n        <h1 className=\"title\">{title}</h1>\n        {subtitle && <h2 className=\"subtitle\">{subtitle}</h2>}\n    </>\n)\n\nexport default Header\n","import React, { useMemo } from 'react';\n\nimport dayjs from 'dayjs';\n\nimport { faHome } from '@fortawesome/free-solid-svg-icons';\n\nimport Header from '../../components/Header';\nimport useDateSelector from '../../hooks/useDateSelector';\n\nconst QuarantinePage = () => {\n    const { selectedDate } = useDateSelector()\n    const leftDays = useMemo(() => {\n        const today = dayjs()\n        const startDay = dayjs(selectedDate)\n        const endDay = startDay.add(14, 'day')\n\n        return endDay.diff(today, 'day')\n    }, [selectedDate])\n\n    const isFuture = leftDays > 14\n\n    if (isFuture) {\n        return (\n            <Header\n                title=\"นี่มันอนาคต !\"\n                color=\"success\"\n                icon={faHome}\n            />\n        )\n    }\n\n    const isLastDay = leftDays === 0\n\n    if (isLastDay) {\n        return (\n            <Header\n                title=\"วันสุดท้ายแล้ว!\"\n                color=\"danger\"\n                subtitle=\"อดทนนน\"\n                icon={faHome}\n            />\n        )\n    }\n\n    return (\n        <Header\n            title={`เหลืออีก ${leftDays} วัน จะครบระยะกักตัว`}\n            color=\"danger\"\n            subtitle=\"อยู่บ้านไปก่อนน้าาา\"\n            icon={faHome}\n        />\n    )\n}\n\n\nexport default QuarantinePage\n","import React, {\n  useEffect,\n  useMemo,\n} from 'react';\n\nimport dayjs from 'dayjs';\nimport ReactGA from 'react-ga';\n\nimport { faCheckCircle } from '@fortawesome/free-solid-svg-icons';\n\nimport Header from '../../components/Header';\nimport useDateSelector from '../../hooks/useDateSelector';\nimport QuarantinePage from '../QuarantinePage';\n\nconst ActivePage = () => {\n    const { selectedDate, clearDate } = useDateSelector()\n    const isFinish = useMemo(() => {\n        const startDay = dayjs(selectedDate)\n        const endDay = startDay.add(14, 'day')\n        const today = dayjs()\n\n        return today.isAfter(endDay)\n    }, [selectedDate])\n\n    useEffect(() => {\n        if (isFinish) {\n            localStorage.clear()\n            ReactGA.event({\n                category: 'user',\n                action: 'complete'\n            })\n        }\n    }, [isFinish])\n\n    const currentPage = isFinish ? (\n        <Header\n            title=\"ยินดีด้วย ครบระยะกักตัวแล้ว\"\n            color=\"success\"\n            icon={faCheckCircle}\n        />\n    ) : <QuarantinePage />\n\n    return (\n        <>  \n            {currentPage}\n            <div className=\"buttons\">\n                <button className=\"button is-primary\" onClick={clearDate}>เปลี่ยนแปลงวันที่กักตัว</button>\n            </div>\n        </>\n    )\n}\n\n\nexport default ActivePage\n","import React from 'react';\n\nimport DayPicker from 'react-day-picker';\n\nimport { faViruses } from '@fortawesome/free-solid-svg-icons';\n\nimport Header from '../../components/Header';\nimport useDateSelector from '../../hooks/useDateSelector';\n\nconst InitTrackPage = () => {\n    const { selectDate } = useDateSelector()\n\n    return (\n        <>\n            <Header title=\"คุณเริ่มกักตัววันไหน ?\" icon={faViruses} color=\"primary\" />\n            <DayPicker onDayClick={selectDate} />\n        </>\n    )\n}\n\nexport default InitTrackPage\n","import React from 'react';\n\nimport styled from 'styled-components';\n\nimport useDateSelector from './hooks/useDateSelector';\nimport ActivePage from './pages/ActivePage';\nimport InitTrackPage from './pages/InitTrackPage';\n\nconst PageContainer = styled.div`\n  width: 100vw;\n  min-height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  flex-direction: column;\n`\n\nfunction App() {\n  const { selectedDate } = useDateSelector()\n\n  const currentPage = selectedDate ? <ActivePage /> : <InitTrackPage />\n\n  return (\n    <PageContainer>\n      {currentPage}\n      <div className=\"footer-wrapper\">\n        <div className=\"credit\">\n          <a className=\"github-button\" href=\"https://github.com/reiiyuki/covid-19\" data-color-scheme=\"no-preference: dark; light: dark; dark: dark;\" data-size=\"large\" data-show-count=\"true\" aria-label=\"Star reiiyuki/covid-19 on GitHub\">Star</a>\n          <p>Powered by Voraton Lertrattanapaisal</p>\n          <p>Idea by Panjarat Sirilapporn</p>\n        </div>\n      </div>\n    </PageContainer>\n  );\n}\n\nexport default App;\n","import React, {\n  ReactNode,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react';\n\nimport ReactGA from 'react-ga';\n\nimport dateSelectorContext from '../../contexts/dateSelectorContext';\n\ninterface Props {\n    children: ReactNode\n}\n\nconst DateSelectorProvider = ({ children }: Props) => {\n    const [selectedDate, setSelectedDate] = useState<Date>()\n\n    const clearDate = useCallback(() => {\n        setSelectedDate(undefined)\n        localStorage.clear()\n        ReactGA.event({\n            category: 'user',\n            action: 'clear_date'\n        })\n    }, [setSelectedDate])\n\n    const selectDate = useCallback((date: Date) => {\n        setSelectedDate(date)\n        localStorage.setItem('startDate', date.getTime().toString())\n        ReactGA.event({\n            category: 'user',\n            action: 'select_date'\n        })\n    }, [setSelectedDate])\n\n    const contextValue = {\n        clearDate,\n        selectDate,\n        selectedDate,\n    }\n\n    useEffect(() => {\n        const timestampStr = localStorage.getItem('startDate')\n        \n        if (timestampStr) {\n          const timestamp = parseInt(timestampStr)\n          setSelectedDate(new Date(timestamp))\n        }\n      }, [])\n\n    return (\n        <dateSelectorContext.Provider value={contextValue}>\n            {children}\n        </dateSelectorContext.Provider>\n    )\n}\n\nexport default DateSelectorProvider\n","import { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n    body {\n        font-family: 'Kanit', san-serif;\n    }\n    .title {\n        margin: 16px;\n    }\n    .button {\n        font-family: 'Kanit', san-serif;\n    }\n    .credit {\n        font-size: 12px;\n        position: fixed;\n        bottom: 8px;\n        left: 0;\n        right: 0;\n    }\n    .footer-wrapper {\n        min-height: 120px;\n        width: 100vw;\n    }\n`","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bulma/css/bulma.css';\nimport 'react-day-picker/lib/style.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport ReactGA from 'react-ga';\n\nimport App from './App';\nimport DateSelectorProvider from './components/DateSelectorProvider';\nimport GlobalStyle from './GlobalStyle';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <DateSelectorProvider>\n      <GlobalStyle />\n      <App />\n    </DateSelectorProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n  () => {\n    ReactGA.initialize('UA-162058993')\n    ReactGA.pageview(window.location.pathname);\n  }\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}