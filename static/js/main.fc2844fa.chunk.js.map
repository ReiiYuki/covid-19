{"version":3,"sources":["components/Footer/index.tsx","contexts/dateSelectorContext/index.ts","hooks/useDateSelector/index.tsx","components/ActivitiesModal/index.tsx","components/Header/index.tsx","pages/QuarantinePage/index.tsx","pages/ActivePage/index.tsx","pages/InitTrackPage/index.tsx","App.tsx","components/DateSelectorProvider/index.tsx","GlobalStyle.tsx","serviceWorker.ts","index.tsx"],"names":["FooterWrapper","styled","div","Credit","Footer","className","href","data-color-scheme","data-size","data-show-count","aria-label","createContext","selectDate","date","clearDate","useDateSelector","useContext","dateSelectorContext","ACTIVITIES","foodOrder","icon","faUtensils","text","action","credit","url","color","news","faNewspaper","record","faNotesMedical","span","Action","Text","p","Button","button","ActivitiesModal","activities","useState","isOpen","setIsOpen","toggle","useCallback","onClick","map","activityKey","key","Detail","Header","title","subtitle","detail","size","QuarantinePage","selectedDate","endDay","useMemo","dayjs","add","leftDays","diff","faHome","isLastDay","releaseText","format","ActivePage","isFinish","isAfter","useEffect","localStorage","clear","ReactGA","event","category","currentPage","faCheckCircle","InitTrackPage","faViruses","onDayClick","PageContainer","App","DateSelectorProvider","children","setSelectedDate","contextValue","undefined","setItem","getTime","toString","timestampStr","getItem","timestamp","parseInt","Date","Provider","value","createGlobalStyle","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","locale","ReactDOM","render","StrictMode","GlobalStyle","document","getElementById","initialize","pageview","pathname","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fc2844fa.chunk.js","sourcesContent":["import React from 'react';\n\nimport styled from 'styled-components';\n\nconst FooterWrapper = styled.div`\n    min-height: 120px;\n    width: 100vw;\n`\n\nconst Credit = styled.div`\n    font-size: 12px;\n    position: fixed;\n    bottom: 8px;\n    left: 0;\n    right: 0;\n`\n\nconst Footer = () => (\n    <FooterWrapper>\n        <Credit>\n            <a className=\"github-button\" href=\"https://github.com/reiiyuki/covid-19\" data-color-scheme=\"no-preference: dark; light: dark; dark: dark;\" data-size=\"large\" data-show-count=\"true\" aria-label=\"Star reiiyuki/covid-19 on GitHub\">Star</a>\n            <div className=\"addthis_inline_share_toolbox\"></div>\n            <p>Developed by Voraton Lertrattanapaisal</p>\n            <p>Idea by Panjarat Sirilapporn</p>\n        </Credit>\n    </FooterWrapper>\n)\n\nexport default Footer\n","import { createContext } from 'react';\n\ninterface ContextValue {\n    selectedDate?: Date\n    selectDate: (date: Date) => void\n    clearDate: () => void\n}\n\nconst defaultContextValue = {\n    selectDate: (date: Date) => {},\n    clearDate: () => {},\n}\n\nexport default createContext<ContextValue>(defaultContextValue)\n","import { useContext } from 'react';\n\nimport dateSelectorContext from '../../contexts/dateSelectorContext';\n\nfunction useDateSelector() {\n    return useContext(dateSelectorContext)\n}\n\nexport default useDateSelector\n","import React, {\n  useCallback,\n  useState,\n} from 'react';\n\nimport styled from 'styled-components';\n\nimport {\n  faNewspaper,\n  faNotesMedical,\n  faUtensils,\n} from '@fortawesome/free-solid-svg-icons';\n\nconst ACTIVITIES = {\n    foodOrder: {\n        icon: faUtensils,\n        text: 'เบื่อใช่ไหม สั่งอะไรอร่อยๆ มากินให้ชุ่มชื้นใจดีกว่า!',\n        action: 'สั่งเลย !',\n        credit: 'Wongnai X LINEMAN',\n        url: 'https://www.wongnai.com/delivery?utm_source=whenwilliseeuagain',\n        color: 'success',\n    },\n    news: {\n        icon: faNewspaper,\n        text: 'ฮั่นแน่! ถึงจะครบระยะกักตัวแล้ว แต่ลองเช็กสถานการณ์ข้างนอกก่อนออกไปไหนไหม เราเป็นห่วง',\n        action: 'เช็คข่าว',\n        credit: 'Workpoints',\n        url: 'https://covid19.workpointnews.com?utm_source=whenwilliseeuagain',\n        color: 'info',\n    },\n    record: {\n        icon: faNotesMedical,\n        text: 'ระหว่างนี้ สังเกตและบันทึกอาการตัวเองด้วยนะ',\n        action: 'บันทึกเลย !',\n        credit: 'Opendream',\n        url: 'https://line.me/R/ti/p/@sabaideebot',\n        color: 'warning',\n    }\n}\n\nconst Credit = styled.span`\n    margin-left: 16px;\n    font-size: 14px;\n`\n\nconst Action = styled.div`\n    display: flex;\n    align-items: center;\n`\n\nconst Text = styled.p`\n    margin-bottom: 8px;\n    font-size: 16px;\n`\n\nconst Button = styled.button`\n    min-width: 120px;\n`\n\ninterface Props {\n    activities: (keyof typeof ACTIVITIES)[]\n}\n\nconst ActivitiesModal = ({ activities }: Props) => {\n    const [isOpen, setIsOpen] = useState(false)\n    const toggle = useCallback(() => {\n        setIsOpen(!isOpen)\n    }, [isOpen, setIsOpen])\n\n    return (\n        <div className=\"buttons\">\n            <button className=\"button is-success\" onClick={toggle}>ทำอะไรดี ?</button>\n            <div className={`modal ${isOpen && 'is-active'}`}>\n                <div className=\"modal-background\" onClick={toggle}></div>\n                <div className=\"modal-content\">\n                    <nav className=\"panel is-primary has-background-white\">\n                        <p className=\"panel-heading\">ทำอะไรดี ?</p>\n                        {activities.map(activityKey => {\n                            const { action, url, color, credit, text } = ACTIVITIES[activityKey]\n                            return (\n                                <div className=\"panel-block\" key={activityKey}>\n                                    <div>\n                                        <Text>{text}</Text>\n                                        <Action>\n                                            <a href={url}>\n                                                <Button className={`button is-${color}`} onClick={toggle}>{action}</Button>\n                                            </a>\n                                            <Credit>By {credit}</Credit>\n                                        </Action>\n                                    </div>\n                                </div>\n                            )\n                        })}\n                    </nav>\n                </div>\n                <button className=\"modal-close is-large\" aria-label=\"close\" onClick={toggle}></button>\n            </div>\n        </div>\n    )\n}\n\nexport default ActivitiesModal\n","import React from 'react';\n\nimport styled from 'styled-components';\n\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\ninterface Props {\n    title: string\n    subtitle?: string\n    detail?: string\n    icon: IconProp\n    color: string\n}\n\nconst Detail = styled.p`\n    margin-bottom: 16px;\n`\n\nconst Header = ({ title, icon, color, subtitle, detail }: Props) => (\n    <>\n        <FontAwesomeIcon icon={icon} size=\"10x\" className={`has-text-${color}`} />\n        <h1 className=\"title\">{title}</h1>\n        {subtitle && <h2 className=\"subtitle\">{subtitle}</h2>}\n        {detail && <Detail>{detail}</Detail>}\n    </>\n)\n\nexport default Header\n","import React, { useMemo } from 'react';\n\nimport dayjs from 'dayjs';\n\nimport { faHome } from '@fortawesome/free-solid-svg-icons';\n\nimport ActivitiesModal from '../../components/ActivitiesModal';\nimport Header from '../../components/Header';\nimport useDateSelector from '../../hooks/useDateSelector';\n\nconst QuarantinePage = () => {\n    const { selectedDate } = useDateSelector()\n    const endDay = useMemo(() => dayjs(selectedDate).add(14, 'day'), [selectedDate])\n    const leftDays = useMemo(() => endDay.diff(dayjs(), 'day'), [endDay])\n\n    const isFuture = leftDays > 14\n\n    if (isFuture) {\n        return (\n            <>\n                <Header\n                    title=\"นี่มันอนาคต !\"\n                    color=\"success\"\n                    icon={faHome}\n                />\n                <ActivitiesModal activities={['news']} />\n            </>\n        )\n    }\n\n    const isLastDay = leftDays === 0\n    const releaseText = `วันที่ ${endDay.format('D MMMM YYYY')} คุณจะเป็นอิสระ !`\n\n    if (isLastDay) {\n        return (\n            <>\n                <Header\n                    title=\"วันสุดท้ายแล้ว!\"\n                    color=\"danger\"\n                    subtitle=\"อดทนนน\"\n                    icon={faHome}\n                    detail={releaseText}\n                />\n                <ActivitiesModal activities={['foodOrder', 'record']} />\n            </>\n        )\n    }\n\n    return (\n        <>\n            <Header\n                title={`เหลืออีก ${leftDays} วัน จะครบระยะกักตัว`}\n                color=\"danger\"\n                subtitle=\"อยู่บ้านไปก่อนน้าาา\"\n                icon={faHome}\n                detail={releaseText}\n            />\n            <ActivitiesModal activities={['foodOrder', 'record']} />\n        </>\n    )\n}\n\n\nexport default QuarantinePage\n","import React, {\n  useEffect,\n  useMemo,\n} from 'react';\n\nimport dayjs from 'dayjs';\nimport ReactGA from 'react-ga';\n\nimport { faCheckCircle } from '@fortawesome/free-solid-svg-icons';\n\nimport ActivitiesModal from '../../components/ActivitiesModal';\nimport Header from '../../components/Header';\nimport useDateSelector from '../../hooks/useDateSelector';\nimport QuarantinePage from '../QuarantinePage';\n\nconst ActivePage = () => {\n    const { selectedDate, clearDate } = useDateSelector()\n    const isFinish = useMemo(() => {\n        const startDay = dayjs(selectedDate)\n        const endDay = startDay.add(14, 'day')\n        const today = dayjs()\n\n        return today.isAfter(endDay)\n    }, [selectedDate])\n\n    useEffect(() => {\n        if (isFinish) {\n            localStorage.clear()\n            ReactGA.event({\n                category: 'user',\n                action: 'complete'\n            })\n        }\n    }, [isFinish])\n\n    const currentPage = isFinish ? (\n        <>\n            <Header\n                title=\"ยินดีด้วย ครบระยะกักตัวแล้ว\"\n                color=\"success\"\n                icon={faCheckCircle}\n            />\n            <ActivitiesModal activities={['news']} />\n        </>\n    ) : <QuarantinePage />\n\n    return (\n        <>  \n            {currentPage}\n            <div className=\"buttons\">\n                <button className=\"button is-primary\" onClick={clearDate}>เปลี่ยนแปลงวันที่กักตัว</button>\n            </div>\n        </>\n    )\n}\n\n\nexport default ActivePage\n","import React from 'react';\n\nimport DayPicker from 'react-day-picker';\n\nimport { faViruses } from '@fortawesome/free-solid-svg-icons';\n\nimport Header from '../../components/Header';\nimport useDateSelector from '../../hooks/useDateSelector';\n\nconst InitTrackPage = () => {\n    const { selectDate } = useDateSelector()\n\n    return (\n        <>\n            <Header title=\"คุณเริ่มกักตัววันไหน ?\" icon={faViruses} color=\"primary\" />\n            <DayPicker onDayClick={selectDate} />\n        </>\n    )\n}\n\nexport default InitTrackPage\n","import React from 'react';\n\nimport styled from 'styled-components';\n\nimport Footer from './components/Footer';\nimport useDateSelector from './hooks/useDateSelector';\nimport ActivePage from './pages/ActivePage';\nimport InitTrackPage from './pages/InitTrackPage';\n\nconst PageContainer = styled.div`\n  width: 100vw;\n  min-height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  flex-direction: column;\n`\n\nfunction App() {\n  const { selectedDate } = useDateSelector()\n\n  const currentPage = selectedDate ? <ActivePage /> : <InitTrackPage />\n\n  return (\n    <PageContainer>\n      {currentPage}\n      <Footer />\n    </PageContainer>\n  );\n}\n\nexport default App;\n","import React, {\n  ReactNode,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react';\n\nimport ReactGA from 'react-ga';\n\nimport dateSelectorContext from '../../contexts/dateSelectorContext';\n\ninterface Props {\n    children: ReactNode\n}\n\nconst DateSelectorProvider = ({ children }: Props) => {\n    const [selectedDate, setSelectedDate] = useState<Date>()\n\n    const clearDate = useCallback(() => {\n        setSelectedDate(undefined)\n        localStorage.clear()\n        ReactGA.event({\n            category: 'user',\n            action: 'clear_date'\n        })\n    }, [setSelectedDate])\n\n    const selectDate = useCallback((date: Date) => {\n        setSelectedDate(date)\n        localStorage.setItem('startDate', date.getTime().toString())\n        ReactGA.event({\n            category: 'user',\n            action: 'select_date'\n        })\n    }, [setSelectedDate])\n\n    const contextValue = {\n        clearDate,\n        selectDate,\n        selectedDate,\n    }\n\n    useEffect(() => {\n        const timestampStr = localStorage.getItem('startDate')\n        \n        if (timestampStr) {\n          const timestamp = parseInt(timestampStr)\n          setSelectedDate(new Date(timestamp))\n        }\n      }, [])\n\n    return (\n        <dateSelectorContext.Provider value={contextValue}>\n            {children}\n        </dateSelectorContext.Provider>\n    )\n}\n\nexport default DateSelectorProvider\n","import { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n    body {\n        font-family: 'Kanit', san-serif;\n    }\n    .title {\n        margin: 16px;\n    }\n    .button {\n        font-family: 'Kanit', san-serif;\n    }\n`","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bulma/css/bulma.css';\nimport 'dayjs/locale/th';\nimport 'react-day-picker/lib/style.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport dayjs from 'dayjs';\nimport ReactGA from 'react-ga';\n\nimport App from './App';\nimport DateSelectorProvider from './components/DateSelectorProvider';\nimport GlobalStyle from './GlobalStyle';\nimport * as serviceWorker from './serviceWorker';\n\ndayjs.locale('th')\n\nReactDOM.render(\n  <React.StrictMode>\n    <DateSelectorProvider>\n      <GlobalStyle />\n      <App />\n    </DateSelectorProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n  () => {\n    ReactGA.initialize('UA-162058993-1')\n    ReactGA.pageview(window.location.pathname);\n  }\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}