{"version":3,"sources":["components/Header/index.tsx","pages/InitTrackPage/index.tsx","pages/CountdownPage/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","title","icon","color","subtitle","size","className","InitTrackPage","setStartDate","onDayClick","useCallback","date","localStorage","setItem","getTime","toString","faViruses","CountdownPage","startDate","useState","isFinish","setIsFinish","leftDays","setLeftDays","clearStartDate","undefined","useEffect","endDay","dayjs","add","today","isAfter","clear","diff","faCheckCircle","faHome","onClick","PageContainer","styled","div","GlobalSheet","createGlobalStyle","App","timestampStr","getItem","timestamp","parseInt","Date","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e862c167.chunk.js","sourcesContent":["import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { IconProp } from '@fortawesome/fontawesome-svg-core'\n\ninterface Props {\n    title: string\n    subtitle?: string\n    icon: IconProp\n    color: string\n}\n\nconst Header = ({ title, icon, color, subtitle }: Props) => (\n    <>\n        <FontAwesomeIcon icon={icon} size=\"10x\" className={`has-text-${color}`} />\n        <h1 className=\"title\">{title}</h1>\n        {subtitle && <h2 className=\"subtitle\">{subtitle}</h2>}\n    </>\n)\n\nexport default Header\n","import React, { useCallback } from 'react'\nimport { faViruses } from '@fortawesome/free-solid-svg-icons'\nimport DayPicker from 'react-day-picker';\nimport Header from '../../components/Header';\n\ninterface Props {\n    setStartDate: (date: Date) => void\n}\n\nconst InitTrackPage = ({ setStartDate }: Props) => {\n    const onDayClick = useCallback((date: Date) => {\n        localStorage.setItem('startDate', date.getTime().toString())\n        setStartDate(date)\n    }, [setStartDate])\n\n    return (\n        <>\n            <Header title=\"คุณเริ่มกักตัววันไหน ?\" icon={faViruses} color=\"primary\" />\n            <DayPicker onDayClick={onDayClick} />\n        </>\n    )\n}\n\nexport default InitTrackPage\n","import React, { useState, useEffect, useCallback } from 'react'\nimport dayjs from 'dayjs'\nimport Header from '../../components/Header'\nimport { faCheckCircle, faHome } from '@fortawesome/free-solid-svg-icons'\n\ninterface Props {\n    startDate: Date\n    setStartDate: (date?: Date) => void\n}\n\nconst CountdownPage = ({ startDate, setStartDate }: Props) => {\n    const [isFinish, setIsFinish] = useState(false)\n    const [leftDays, setLeftDays] = useState(0)\n\n    const clearStartDate = useCallback(() => {\n        setStartDate(undefined)\n    }, [setStartDate])\n\n    useEffect(() => {\n        const startDay = dayjs(startDate)\n        const endDay = startDay.add(14, 'day')\n        const today = dayjs()\n        if (today.isAfter(endDay)) {\n            setIsFinish(true)\n            localStorage.clear()\n        } else {\n            setLeftDays(endDay.diff(today, 'day'))\n        }\n    }, [startDate])\n\n    return (\n        <>  \n            <Header\n                title={isFinish ? 'ยินดีด้วย ครบระยะกักตัวแล้ว':`เหลืออีก ${leftDays} วันจะครบระยะกักตัว`}\n                icon={isFinish ? faCheckCircle : faHome}\n                color={isFinish ? 'success':'danger'}\n                subtitle={!isFinish ? 'อยู่บ้านไปก่อนนะ' : undefined}\n            />\n            <div className=\"buttons\">\n                <button className=\"button is-primary\" onClick={clearStartDate}>เปลี่ยนแปลงวันที่กักตัว</button>\n            </div>\n        </>\n    )\n}\n\nexport default CountdownPage\n","import React, { useState, useEffect } from 'react';\nimport styled, { createGlobalStyle } from 'styled-components'\nimport InitTrackPage from './pages/InitTrackPage';\nimport CountdownPage from './pages/CountdownPage';\n\nconst PageContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  flex-direction: column;\n`\n\nconst GlobalSheet = createGlobalStyle`\n  body {\n    font-family: 'Kanit', san-serif;\n    .title {\n      margin: 16px;\n    }\n    .button {\n      font-family: 'Kanit', san-serif;\n    }\n  }\n`\n\nfunction App() {\n  const [startDate, setStartDate] = useState<Date>()\n\n  useEffect(() => {\n    const timestampStr = localStorage.getItem('startDate')\n    \n    if (timestampStr) {\n      const timestamp = parseInt(timestampStr)\n      setStartDate(new Date(timestamp))\n    }\n  }, [])\n\n  return (\n    <PageContainer>\n      <GlobalSheet />\n      {startDate ? <CountdownPage startDate={startDate} setStartDate={setStartDate} /> : <InitTrackPage setStartDate={setStartDate} />}\n    </PageContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bulma/css/bulma.css'\nimport 'react-day-picker/lib/style.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}